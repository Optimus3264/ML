# -*- coding: utf-8 -*-
"""diabeties prediction using logistic regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aA-puhK1SDibOl7ynrt0R6YgPh6Fm-el
"""

import pandas as pd
import numpy as np
from sklearn import LogisticRegression

df=pd.read_csv('diabetes.csv')
print(df)

df.describe()

df.shape

df.info()

df.columns

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Load dataset
df = pd.read_csv("diabetes.csv")

# Prepare features and label
X = df.drop("Outcome", axis=1)
y = df["Outcome"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict for a new person (change values as needed)
new_data = pd.DataFrame([{
    'Pregnancies': 3,
    'Glucose': 130,
    'BloodPressure': 78,
    'SkinThickness': 25,
    'Insulin': 100,
    'BMI': 32.0,
    'DiabetesPedigreeFunction': 0.6,
    'Age': 40
}])

prediction = model.predict(new_data)
print("Prediction (1 = Diabetic, 0 = Not Diabetic):", prediction[0])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the dataset
df = pd.read_csv("diabetes.csv")

# Separate diabetic and non-diabetic cases
df_diabetic = df[df['Outcome'] == 1]
df_nondiabetic = df[df['Outcome'] == 0]

# Balance the dataset by undersampling the majority class
min_count = min(len(df_diabetic), len(df_nondiabetic))
df_balanced = pd.concat([
    df_diabetic.sample(min_count, random_state=42),
    df_nondiabetic.sample(min_count, random_state=42)
]).sample(frac=1, random_state=42).reset_index(drop=True)

# Features and labels
X = df_balanced.drop("Outcome", axis=1)
y = df_balanced["Outcome"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predictions and accuracy
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("Accuracy on balanced dataset:", accuracy)